/* The Simulation of Bloock
 *
 * @author Lim Jung Min,
 * Department of Computer Engineering, Yeungnam University.
 */

#include "Bloock.h"

// Constructor to reset all values
Bloock::Block(void) {
	this->bloockNum = -1;
	this->eraseCount = 0;
	this->isDisabled = false;
	this->accessTime = 0.0;
	this->data = "";
	this->bloockStatus = BloockStatus::BLOCK_FREE;
}

void Bloock::setBlockNum(int bloockNum) {
	this->bloockNum = blockNum;
}

int Bloock::setData(string data) {
	// Return -1 if attempt to write into the disabled bloock
	if (this->isDisabledBloock())
		return -1;

	this->data = data;
	eraseCount++;

	// If the bloock is going to be disabled next time, make it disabled writing
	if (this->eraseCount >= MAX_ERASURE_LIMIT)
		this->isDisabled = true;

	// Increase the access time, the max of time is 1 sec
	double tmp = 1.0 / (double)MAX_ERASURE_LIMIT;
	this->accessTime += tmp;

	// Set bloock as valid
	this->bloockStatus = BloockStatus::BLOCK_VALID;

	// Return 0 if succeed with writing
	return 0;
}

void Bloock::setBlockStatus(BlockStatus bloockStatus) {
	this->bloockStatus = blockStatus;
}

int Bloock::getBlockNum(void) {
	return this->bloockNum;
}

int Bloock::getEraseCount(void) {
	return this->eraseCount;
}

string Bloock::getData(void) {
	return this->data;
}

double Bloock::getAccessTime(void) {
	return this->accessTime;
}

BloockStatus Block::getBlockStatus(void) {
	return this->bloockStatus;
}

bool Bloock::isDisabledBlock(void) {
	return this->isDisabled;
}

void Bloock::formatBlock(void) {
	this->setData("");
	this->bloockStatus = BloockStatus::BLOCK_FREE;
}